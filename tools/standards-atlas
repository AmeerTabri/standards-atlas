#!/bin/bash
# vim: ft=sh:sw=4:et
# SPDX-License-Identifier: LGPL-3.0-only


### command line processing

readableindex=0

usage() { echo "Usage: $0 [-i] [-d <path/stdatlasdir>] [-g <gitrepo>] [-r <MYREQ>] [-p <STDANDARD>]" 1>&2; exit 0; }

while getopts "id:g:r:p:" arg; do
    case $arg in
        i)
            readableindex=1
            ;;
        d)
            stdatlasdir="${OPTARG}"
            ;;
        g)
            gitrepo="${OPTARG}"
            ;;
        r)
            myreqs="${OPTARG}"
            ;;
        p)
            myparent="${OPTARG}"
            ;;
        h | *)
            usage
            exit 0
    esac
done


### some default settings

stdatlasdir="${stdatlasdir:-/tmp/standards-atlas}"
myreqs="${myreqs:-SOHP}"
myparent="${myparent:-EN50657}"
mydigits=3
atlastooldir="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
atlashomedir="$(dirname "$atlastooldir")"
atlasdatadir="$atlashomedir/data"
standards=( IEC61508 ISO26262 EN50126 EN50128 EN50129 EN50657 )


### sanity checks and preparation

if [ ! -d "$atlasdatadir" ]; then
    echo "Cannot find Atlas Home $atlasdatadir! I am lost, giving up."
    exit 1
fi

if [ ! -d "$stdatlasdir" ]; then
    echo "Creating $stdatlasdir"
    mkdir -p $stdatlasdir || exit 1;
fi

cd $stdatlasdir

if [ ! -d "$stdatlasdir/.git" ]; then
    echo "$stdatlasdir is not controlled by git, initiating git"
    git init $stdatlasdir
fi

zeroPad(){
    # zero_pad <string> <length>
    [ ${#1} -lt $2 ] && printf "%0$(($2-${#1}))d" ''
    printf "%s\n" "$1"
}

setAttributes()
{
    local standard=$1
    local name=$2
    cat <<EOD >>./requirements/${standard}/.doorstop.yml
attributes:
  defaults:
    type: standard
    rationale: ''
    notes: []
    standard:
      mandatory: true
      name: ${name}
      numID: ''
      refID: ''
      volume: ''
      level: ''
      text: ''
EOD
}


addItem()
{
    local item=$1
    local requirement=$2
    volShift="${volShift:-0}"
    volDigits="${volDigits:-0}"
    local title=''
    local text=''
    local headline=''
    local volNR=$(cut -s -d'-' -f1 <<<$item)
    if [ -n "$volNR" ]; then
        StdVolume="-${volNR}"
        volNR=$((volNR+volShift))
        while [ ${#volNR} -lt "$volDigits" ]; do
            volNR="0${volNR}"
        done
        item=$(cut -s -d'-' -f2 <<<$item)
    else
        StdVolume=""
    fi
    # substitution for chapters A-ZZ
    local chaptersub=$(cut -s -d':' -f1 <<<$item)
    if [ -n "$chaptersub" ]; then
        item=$(cut -s -d':' -f2 <<<$item)
    fi
    chapter=$(cut -s -d'.' -f1 <<<$item)
    section=$(cut -s -d'.' -f2 <<<$item)
    paragraph=$(cut -s -d'.' -f3 <<<$item)
    clause=$(cut -s -d'.' -f4 <<<$item)
    subclause=$(cut -s -d'.' -f5 <<<$item)
    if [ -z "$chapter" ]; then
        chapter=$item
    fi
    typeID=${chapter:0:1}
    if [[ $chapter =~ [a-z] ]]; then
        chapter=${chapter:1}
    fi
    if [ -n "$chaptersub" ]; then
        level=${chaptersub}
    else
        level="${chapter}"
    fi
    if [ -n "$volNR" ]; then
        dsname="${volNR}$(zeroPad ${chapter} 2)"
        level="${volNR}.${level}"
    else
        dsname="$(zeroPad ${chapter} 2)"
        level="$level"
    fi
    index="$chapter"
    if [ -n "$section" ]; then
        if [[ "$section" =~ \+ ]]; then
            section=${section:1}
            dsname="${dsname}$(printf '%03d' ${section})"
        else
            dsname="${dsname}$(printf '%02d' ${section})"
        fi
        index="${index}.${section}"
        level="${level}.${section}"
    fi
    if [ -n "$paragraph" ]; then
        if [[ "$paragraph" =~ \+ ]]; then
            paragraph=${paragraph:1}
            dsname="${dsname}$(printf '%03d' ${paragraph})"
        else
            dsname="${dsname}$(printf '%02d' ${paragraph})"
        fi
        index="${index}.${paragraph}"
        level="${level}.${paragraph}"
    fi
    if [ -n "$clause" ]; then
        dsname="${dsname}$(printf '%02d' ${clause})"
        index="${index}.${clause}"
        level="${level}.${clause}"
    fi
    if [ -n "$subclause" ]; then
        dsname="${dsname}$(printf '%02d' ${subclause})"
        index="${index}.${subclause}"
        level="${level}.${subclause}"
    fi
    pad=$(printf "%*s" "$digits")
    pad=${pad// /0}
    dsname=$(printf "%s%s" $dsname "${pad:${#dsname}}")
    indexString="${name}${StdVolume}:${year} ${index}"
    locID=$(echo -n $indexString | md5sum | cut -c 1-32)
    title=$(grep "TOC;$locID" ${atlasdatadir}/${requirement} | cut -d\; -f4)
    if [ -z "$title" ]; then
        xString="${name}:${oyr}${StdVolume} ${index}"
        xID=$(echo -n $xString | md5sum | cut -c 1-32)
        title=$(grep "TOC;$xID" ${atlasdatadir}/${requirement} | cut -d\; -f4)
    fi
    headline=$(grep "TEXT;$locID" ${atlasdatadir}/${requirement} | cut -d\; -f4)
    text=$(grep "TEXT;$locID" ${atlasdatadir}/${requirement} | cut -d\; -f5)
    if [ -n "$headline" ]; then
        subindex=$(cut -s -d'.' -f3- <<<$index)
        title="$subindex $headline"
    fi
    if [ "$typeID" == 'r' ]; then
        title="${title:-REQUIREMENT}"
        text="${text:-REQUIREMENT}"
        type='requirement'
    elif [ "$typeID" == 's' ]; then
        title="${title:-SCOPE}"
        text="${text:-SCOPE}"
        type='scope'
    elif [ "$typeID" == 'o' ]; then
        title="${title:-OBJECTIVE}"
        text="${text:-OBJECTIVE}"
        type='objective'
    elif [ "$typeID" == 't' ]; then
        title="${title:-TERM}"
        text="${text:-TERM}"
        type='term'
    elif [ "$typeID" == 'c' ]; then
        title="${title:-CLAUSE}"
        text="${text:-CLAUSE}"
        type='clause'
    else
        title="${title:-TOC}"
        text="${text:-TOC}"
        type='toc'
    fi
    cat <<EOD >./defaults.yml
type: '$type'
header: '$index $title'
text: '$text'
ref: ''
references:
- path: .*\.md
  type: pattern
  keyword: $indexString
standard:
  name: ${name}
  numID: '$dsname'
  refID: '$locID'
EOD
if [ "$readableindex" -eq 1 ]; then
    locString="$indexString"
else
    locString="$dsname"
fi
echo "TOC;$locID;${locString};$title" >>header${standard}
echo "TEXT;$locID;${locString};$text" >>text${standard}
doorstop add -l $level -d defaults.yml -n $dsname $requirement
}

### create standard documents

for standard in ${standards[@]} $myreqs
do
    if [ -f "$atlasdatadir/$standard" ]; then
        . $atlasdatadir/$standard
    else
        echo WARNING: no datafile for $standard
        parent=$myparent
        digits=$mydigits
        volShift=0
        volDigits=0
        structure=()
    fi
    if [ -z "$parent" ]; then
        doorstop create -d $digits -s '-' ${standard} ./requirements/${standard}
    else
        doorstop create -d $digits -s '-' ${standard} ./requirements/${standard} --parent ${parent}
    fi

    setAttributes ${standard} ${name} 

    for index in ${!structure[@]}
    do
        volume=${structure[$index]}
        year=${volume:0:4}
        volume=${volume:5}
        for item in $(eval echo ${volume})
        do
            addItem ${item} ${standard}
        done
    done
done

