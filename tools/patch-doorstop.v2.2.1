#!/bin/bash

if [ -z "$1" ]; then
	echo -e "$0 Error:\n\tpathname to the doorstop installation to patch required"
	exit 1
fi
doorstopHome=$1

cat >/tmp/doorstop.v2.2.1.patch <<EOD
diff -Nur doorstop.v2.2.1/cli/commands.py doorstop.stdatlas/cli/commands.py
--- doorstop.v2.2.1/cli/commands.py	2024-11-04 14:59:54.013240556 +0100
+++ doorstop.stdatlas/cli/commands.py	2024-11-04 19:42:36.152208823 +0100
@@ -184,7 +184,7 @@
         # add items to it
         for _ in range(args.count):
             item = document.add_item(
-                level=args.level, defaults=args.defaults, name=args.name
+                level=args.level, defaults=args.defaults, name=args.name, reorder=args.noreorder
             )
             utilities.show("added item: {} ({})".format(item.uid, item.relpath))
 
diff -Nur doorstop.v2.2.1/cli/main.py doorstop.stdatlas/cli/main.py
--- doorstop.v2.2.1/cli/main.py	2024-11-04 19:38:43.649937965 +0100
+++ doorstop.stdatlas/cli/main.py	2024-11-04 19:39:44.984758205 +0100
@@ -277,6 +277,11 @@
         metavar="FILE",
         help=("file in YAML format with default values for attributes of the new item"),
     )
+    sub.add_argument(
+        "--noreorder",
+        action="store_false",
+        help=("disable automatic reordering of file"),
+    )
 
 
 def _remove(subs, shared):
diff -Nur doorstop.v2.2.1/core/importer.py doorstop.stdatlas/core/importer.py
--- doorstop.v2.2.1/core/importer.py	2024-11-04 14:59:54.020240651 +0100
+++ doorstop.stdatlas/core/importer.py	2024-11-04 17:43:58.780536398 +0100
@@ -267,7 +267,7 @@
 
                         ref_dict = {"type": ref_type, "path": ref_path}
                         if len(ref_item_components) == 3:
-                            ref_keyword = ref_item_components[2].split(":")[1]
+                            ref_keyword = ref_item_components[2].split(":",1)[1]
                             ref_dict["keyword"] = ref_keyword
 
                         ref.append(ref_dict)
diff -Nur doorstop.v2.2.1/core/item.py doorstop.stdatlas/core/item.py
--- doorstop.v2.2.1/core/item.py	2024-11-04 14:59:54.020240651 +0100
+++ doorstop.stdatlas/core/item.py	2024-11-04 17:52:23.087820809 +0100
@@ -290,7 +290,7 @@
                     continue
                 stripped_value = []
                 for el in value:
-                    ref_dict = {"path": el["path"].strip(), "type": "file"}  # type: ignore
+                    ref_dict = {"path": el["path"].strip(), "type": el["type"].strip()}  # type: ignore
 
                     if "keyword" in el:
                         ref_dict["keyword"] = el["keyword"]  # type: ignore
@@ -668,10 +668,16 @@
             path = ref_item["path"]
             keyword = ref_item["keyword"] if "keyword" in ref_item else None
 
-            reference = self.reference_finder.find_file_reference(
-                path, self.root, self.tree, self.path, keyword
-            )
-            references.append(reference)
+            if ref_item["type"] == "pattern":
+                reference = self.reference_finder.find_pattern_reference(
+                    path, self.root, self.tree, self.path, keyword
+                )
+                references.extend(reference)
+            else:
+                reference = self.reference_finder.find_file_reference(
+                    path, self.root, self.tree, self.path, keyword
+                )
+                references.append(reference)
         return references
 
     def find_child_links(self, find_all=True):
diff -Nur doorstop.v2.2.1/core/publisher.py doorstop.stdatlas/core/publisher.py
--- doorstop.v2.2.1/core/publisher.py	2024-11-04 14:59:54.020240651 +0100
+++ doorstop.stdatlas/core/publisher.py	2024-11-04 18:07:38.971385694 +0100
@@ -538,9 +538,11 @@
     """Format an external reference in Markdown."""
     if settings.CHECK_REF:
         path, line = item.find_ref()
+        if path == '':
+            return ''
         path = path.replace("\\\\", "/")  # always use unix-style paths
         if line:
-            return "> \`{p}\` (line {line})".format(p=path, line=line)
+            return "> [{p}](\`../{p}\`) (line {line})".format(p=path, line=line)
         else:
             return "> \`{p}\`".format(p=path)
     else:
@@ -553,11 +555,15 @@
         references = item.find_references()
         text_refs = []
         for ref_item in references:
+            if not ref_item:
+                continue
             path, line = ref_item
+            if path == '':
+                return ''
             path = path.replace("\\\\", "/")  # always use unix-style paths
 
             if line:
-                text_refs.append("> \`{p}\` (line {line})".format(p=path, line=line))
+                text_refs.append("> [{p}](../\`{p}\`) (line {line})\n".format(p=path, line=line))
             else:
                 text_refs.append("> \`{p}\`".format(p=path))
 
diff -Nur doorstop.v2.2.1/core/reference_finder.py doorstop.stdatlas/core/reference_finder.py
--- doorstop.v2.2.1/core/reference_finder.py	2024-11-04 14:59:54.020240651 +0100
+++ doorstop.stdatlas/core/reference_finder.py	2024-11-04 18:58:43.145179616 +0100
@@ -55,8 +55,8 @@
                     log.debug("found ref: {}".format(relpath))
                     return relpath, lineno
 
-        msg = "external reference not found: {}".format(ref)
-        raise DoorstopError(msg)
+        log.debug("external reference not found: {}".format(ref))
+        return '', ''
 
     @staticmethod
     def find_file_reference(ref_path, root, tree, item_path, keyword=None):
@@ -98,3 +98,53 @@
 
         msg = "external reference not found: {}".format(ref_path)
         raise DoorstopError(msg)
+
+
+    @staticmethod
+    def find_pattern_reference(pattern, root, tree, item_path, keyword):
+        """Find an external reference based on a search regex pattern.
+        :raises: :class:'~doorstop.common.DoorstopWarning' when no
+            reference is found
+        :return: List of tuples [(ref_path1, line), (ref_path2, line), ... ]
+            when references are found
+        """
+
+        log.debug("searching for pattern '{}'...".format(pattern))
+
+        if keyword == None :
+            msg = "find_pattern_reference without keyword: {}".format(pattern)
+            raise DoorstopError(msg)
+
+        reflist = []
+
+        rex = re.compile(pattern)
+        for path, _filename, relpath in tree.vcs.paths:
+            # Skip the item's file while searching
+            if path == item_path:
+                continue
+            # if re.match(".*\.md", path):
+            log.debug("check ref in '{}'...".format(path))
+            if rex.match(path):
+                log.debug("got ref in '{}'...".format(path))
+
+                # Search for the reference in the file
+                try:
+                    lines = linecache.getlines(path)
+                except SyntaxError:
+                    log.trace("unable to read lines from: {}".format(path))  # type: ignore
+                    continue
+
+                log.debug("searching pattern for keyword '{}'...".format(re.escape(keyword)))
+                pattern = r"(\b|\W){}(\b|\W)".format(re.escape(keyword))
+                log.trace("regex: {}".format(pattern))  # type: ignore
+                regex = re.compile(pattern)
+                for lineno, line in enumerate(lines, start=1):
+                    if regex.search(line):
+                        log.debug("found ref: {}".format(relpath))
+                        reflist.append( (relpath, lineno) )
+
+        if reflist :
+            return reflist
+
+        log.debug("external pattern reference not found: {}".format(keyword))
+        return '', ''
diff -Nur doorstop.v2.2.1/core/yaml_validator.py doorstop.stdatlas/core/yaml_validator.py
--- doorstop.v2.2.1/core/yaml_validator.py	2024-11-04 14:59:54.031240798 +0100
+++ doorstop.stdatlas/core/yaml_validator.py	2024-11-04 18:59:41.307938250 +0100
@@ -34,9 +34,9 @@
                         )
 
                     ref_type = ref_dict["type"]
-                    if ref_type != "file":
+                    if ref_type != "file" and ref_type != "pattern":
                         raise AttributeError(
-                            "'references' member's 'type' value must be a 'file'"
+                            "'references' member's 'type' value must be a 'file' or 'pattern'"
                         )
 
                     ref_path = ref_dict["path"]
EOD

cd $doorstopHome
patch -p1 </tmp/doorstop.v2.2.1.patch
