#!/usr/bin/env python3

import csv
import sys
import os
import re
import linecache
import hashlib
import subprocess

import argparse
from pathlib import Path

parser = argparse.ArgumentParser()
parser.add_argument(
    "atlas_path", help="Path to the standards-atlas directory", type=Path
)
parser.add_argument("map_path", help="Path to the uid-ref-map", type=Path)

p = parser.parse_args()

if not p.atlas_path.exists():
    print("Path {} does not exist -> aborting".format(p.atlas_path))
    exit(1)

scriptpath = os.path.dirname(__file__)
traveloguedir = scriptpath + "/../travelogue"
mappath = scriptpath + "/../data/uid-ref-map"
relpath = scriptpath + "/../data/relations.csv"
mappings = linecache.getlines(str(mappath))


refMapFile = "csv/uid-ref-map.csv"

relationsScore = {}
bijectives = {}
refMap = {}

with open(relpath, newline="") as csvfile:
    relReader = csv.reader(csvfile, delimiter=";", quotechar="|")
    for row in relReader:
        fromClause = row[0]
        toClause = row[1]
        score = row[2]
        relation = (fromClause, toClause)
        relationsScore[relation] = score

with open(mappath, newline="") as csvfile:
    mapReader = csv.reader(csvfile, delimiter=";", quotechar="|")
    for row in mapReader:
        doorstopID = row[1]
        clauseID = row[2]
        refMap[clauseID] = doorstopID

for fromClause, toClause in relationsScore.keys():
    # print(f"From {fromClause} to {toClause}")
    reverseRelation = (toClause, fromClause)
    if reverseRelation in relationsScore:
        # print(f"bijective {toClause}<->{fromClause}")
        if fromClause in refMap and toClause in refMap:
            fromID = refMap[fromClause]
            toID = refMap[toClause]
            # print(f"mapping {toID}<->{fromID}")
        else:
            # print(f"refMap key missing {toClause}<->{fromClause}")
            continue
        cmdline = ["doorstop", "link", fromID, toID]
        result = subprocess.run(cmdline, check=False, text=True)
        if fromClause in bijectives:
            bijectives[fromClause].append(toClause)
        else:
            bijectives[fromClause] = []
            bijectives[fromClause].append(toClause)

        if toClause in bijectives:
            bijectives[toClause].append(fromClause)
        else:
            bijectives[toClause] = []
            bijectives[toClause].append(fromClause)
