#!/usr/bin/env python3

import sys
import os
import re
import linecache
import hashlib

import argparse
from pathlib import Path

parser = argparse.ArgumentParser()
parser.add_argument("atlas_path", help="Path to the standards-atlas directory",type=Path)

p = parser.parse_args()

if not p.atlas_path.exists():
    print("Path {} does not exist -> aborting".format(p.atlas_path))
    exit(1)

def find_all_relevant_files(dir,ending):
    matches = []
    for file in os.listdir(dir):
        if file.endswith(ending):
            matches.append(os.path.join(dir,file))
    return matches

scriptpath = os.path.dirname(__file__)
traveloguedir = scriptpath+"/../travelogue"
mappath = scriptpath+'/../data/uid-ref-map'
mappings = linecache.getlines(str(mappath))

def reflink(refobj):
    ref = refobj.group(0)
    pattern = r"(\b|\W){}[^A-Za-z0-9.]".format(re.escape(ref))
    ds_regex = re.compile(pattern)
    for mapping in mappings:
        match = ds_regex.search(mapping)
        if match:
            linkdata = mapping.split(';')
            standard = linkdata[1].split('-')
            # print('[{}](../dist/{}.html#{})'.format(linkdata[2].rstrip(), standard[0], linkdata[1]))
            return '[{}](../requirements/{}.html#{})'.format(linkdata[2].rstrip(), standard[0], linkdata[1])
    return f">>{ref}<<"

files_to_reference = find_all_relevant_files(traveloguedir,".md")

newtraveloguedir = os.path.join(p.atlas_path,os.path.basename(traveloguedir))
if not os.path.exists(newtraveloguedir):
    os.mkdir(newtraveloguedir)

iso_pattern = r'([A-Z]+\s+\d\d\d\d\d)-?\d*:\d\d\d\d\s+([1-9A-Z][0-9.]*)'
iso_regex = re.compile(iso_pattern)

for file in files_to_reference:
    with open(file, 'r') as rfile:
        newfile = os.path.join(newtraveloguedir,os.path.basename(file))
        if os.path.exists(newfile):
            os.remove(newfile)
        with open(newfile, 'w+') as wfile:
            for line in rfile:
                newline = iso_regex.sub(reflink, line)
                wfile.write(newline)
